name: Cosnap AI CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: cosnap-ai

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY CHECKS
  # =============================================================================
  
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend code quality
      - name: Install backend dependencies
        working-directory: ./runninghub-backend
        run: npm ci

      - name: Lint backend code
        working-directory: ./runninghub-backend
        run: npm run lint || true  # Don't fail on lint errors initially

      # Frontend code quality  
      - name: Install frontend dependencies
        working-directory: ./project
        run: npm ci

      - name: Lint frontend code
        working-directory: ./project
        run: npm run lint

      - name: Type check frontend
        working-directory: ./project
        run: npx tsc --noEmit

      # Security scanning
      - name: Run security audit (backend)
        working-directory: ./runninghub-backend
        run: npm audit --audit-level=moderate || true

      - name: Run security audit (frontend)
        working-directory: ./project
        run: npm audit --audit-level=moderate || true

      # Code scanning with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # SAST scanning with Semgrep
      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/javascript
            p/react
            p/express
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # =============================================================================
  # TESTING
  # =============================================================================

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./runninghub-backend
        run: npm ci

      - name: Setup test database
        working-directory: ./runninghub-backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma db push
          npx prisma generate

      - name: Run unit tests
        working-directory: ./runninghub-backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_secret_access_key_minimum_32_chars
          JWT_REFRESH_SECRET: test_secret_refresh_key_minimum_32_chars
          RUNNINGHUB_API_KEY: test_api_key
          ALI_OSS_ACCESS_KEY_ID: test_access_key
          ALI_OSS_ACCESS_KEY_SECRET: test_access_secret
          ALI_OSS_BUCKET: test_bucket
        run: npm run test:unit

      - name: Run integration tests
        working-directory: ./runninghub-backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_secret_access_key_minimum_32_chars
          JWT_REFRESH_SECRET: test_secret_refresh_key_minimum_32_chars
          RUNNINGHUB_API_KEY: test_api_key
          ALI_OSS_ACCESS_KEY_ID: test_access_key
          ALI_OSS_ACCESS_KEY_SECRET: test_access_secret
          ALI_OSS_BUCKET: test_bucket
        run: npm run test:integration

      - name: Generate test coverage
        working-directory: ./runninghub-backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_secret_access_key_minimum_32_chars
          JWT_REFRESH_SECRET: test_secret_refresh_key_minimum_32_chars
          RUNNINGHUB_API_KEY: test_api_key
          ALI_OSS_ACCESS_KEY_ID: test_access_key
          ALI_OSS_ACCESS_KEY_SECRET: test_access_secret
          ALI_OSS_BUCKET: test_bucket
        run: npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./runninghub-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./project
        run: npm ci

      - name: Run unit tests
        working-directory: ./project
        run: npm run test:run

      - name: Generate test coverage
        working-directory: ./project
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./project/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # =============================================================================
  # E2E TESTING
  # =============================================================================

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: ./runninghub-backend
        run: npm ci

      - name: Install frontend dependencies  
        working-directory: ./project
        run: npm ci

      - name: Setup test database
        working-directory: ./runninghub-backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma db push
          npx prisma generate

      - name: Start backend server
        working-directory: ./runninghub-backend
        env:
          NODE_ENV: test
          PORT: 3001
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_ACCESS_SECRET: test_secret_access_key_minimum_32_chars
          JWT_REFRESH_SECRET: test_secret_refresh_key_minimum_32_chars
          RUNNINGHUB_API_KEY: test_api_key
          ALI_OSS_ACCESS_KEY_ID: test_access_key
          ALI_OSS_ACCESS_KEY_SECRET: test_access_secret
          ALI_OSS_BUCKET: test_bucket
        run: |
          npm start &
          sleep 10

      - name: Build frontend
        working-directory: ./project
        env:
          VITE_API_BASE_URL: http://localhost:3001
        run: npm run build

      - name: Install Playwright browsers
        working-directory: ./project
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./project
        env:
          VITE_API_BASE_URL: http://localhost:3001
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: ./project/test-results/

  # =============================================================================
  # BUILD AND DEPLOYMENT
  # =============================================================================

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./runninghub-backend
        run: npm ci --only=production

      - name: Generate Prisma client
        working-directory: ./runninghub-backend
        run: npx prisma generate

      - name: Create deployment artifact
        run: |
          cd runninghub-backend
          tar -czf ../backend-build.tar.gz \
            --exclude=node_modules/.cache \
            --exclude=coverage \
            --exclude=__tests__ \
            .

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend-build.tar.gz
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./project
        run: npm ci

      - name: Build application
        working-directory: ./project
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'https://cosnap-backend.railway.app' }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_GA_ID: ${{ secrets.VITE_GA_ID }}
          VITE_BUILD_TIME: ${{ github.run_id }}
          NODE_ENV: production
        run: npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./project/dist
          retention-days: 7

  # =============================================================================
  # DOCKER BUILD
  # =============================================================================

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./runninghub-backend
          file: ./runninghub-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./project
          file: ./project/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOYMENT TO STAGING
  # =============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-e2e, build-docker]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          echo "Staging deployment completed"

  # =============================================================================
  # DEPLOYMENT TO PRODUCTION
  # =============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-e2e, build-docker]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Deploy backend to Railway
      - name: Deploy backend to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Install Railway CLI
          npm install -g @railway/cli
          
          # Deploy backend
          cd runninghub-backend
          railway login --token $RAILWAY_TOKEN
          railway deploy --service backend

      # Deploy frontend to Vercel
      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./project
          vercel-args: '--prod'

  # =============================================================================
  # POST-DEPLOYMENT TESTING
  # =============================================================================

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Test backend health
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Test backend health endpoints
          BACKEND_URL="${{ secrets.BACKEND_URL || 'https://cosnap-backend.railway.app' }}"
          
          echo "Testing backend health..."
          curl -f "$BACKEND_URL/health" || exit 1
          
          echo "Testing backend readiness..."
          curl -f "$BACKEND_URL/health/ready" || exit 1
          
          echo "Testing backend metrics..."
          curl -f "$BACKEND_URL/health/metrics" || exit 1

      - name: Test frontend deployment
        run: |
          # Test frontend health
          FRONTEND_URL="${{ secrets.FRONTEND_URL || 'https://cosnap.vercel.app' }}"
          
          echo "Testing frontend accessibility..."
          curl -f "$FRONTEND_URL" || exit 1
          
          echo "Testing frontend API connectivity..."
          curl -f "$FRONTEND_URL/api/test" || echo "API test endpoint not available"

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add specific smoke tests here
          echo "Smoke tests completed"

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # NOTIFICATION
  # =============================================================================

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [test-deployment]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    
    steps:
      - name: Notify deployment status
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ "${{ needs.test-deployment.result }}" == "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi
          
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"attachments\":[{\"color\":\"$COLOR\",\"title\":\"Cosnap AI Deployment\",\"text\":\"$STATUS - Deployment to production\",\"fields\":[{\"title\":\"Commit\",\"value\":\"${{ github.sha }}\",\"short\":true},{\"title\":\"Author\",\"value\":\"${{ github.actor }}\",\"short\":true}]}]}" \
              $SLACK_WEBHOOK
          fi
          
          echo "Deployment status: $STATUS"