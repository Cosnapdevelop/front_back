name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Backend)
        run: |
          cd runninghub-backend
          npm audit --audit-level=high

      - name: Run npm audit (Frontend)
        run: |
          cd project
          npm audit --audit-level=high

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cosnap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: runninghub-backend/package-lock.json

      - name: Install dependencies
        run: |
          cd runninghub-backend
          npm ci

      - name: Setup test database
        run: |
          cd runninghub-backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/cosnap_test

      - name: Run unit tests
        run: |
          cd runninghub-backend
          npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/cosnap_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret

      - name: Run integration tests
        run: |
          cd runninghub-backend
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/cosnap_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret

      - name: Generate test coverage
        run: |
          cd runninghub-backend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./runninghub-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: project/package-lock.json

      - name: Install dependencies
        run: |
          cd project
          npm ci

      - name: Run ESLint
        run: |
          cd project
          npm run lint

      - name: Run unit tests
        run: |
          cd project
          npm run test:run

      - name: Run E2E tests
        run: |
          cd project
          npm run test:e2e:headed
        env:
          CI: true

      - name: Generate test coverage
        run: |
          cd project
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./project/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and Test Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./project
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Build and push Backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./runninghub-backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway (Staging)
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "${{ secrets.RAILWAY_STAGING_SERVICE_ID }}",
              "image": "${{ needs.build-images.outputs.backend-image }}"
            }' \
            https://api.railway.app/v1/deployments

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod --env staging'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./project

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Test basic endpoints
          curl -f ${{ secrets.STAGING_FRONTEND_URL }}/health || exit 1
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/health || exit 1
          
          # Test API endpoints
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/api/effects || exit 1

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Scan on Built Images
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.frontend-image }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.backend-image }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Frontend scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

      - name: Upload Backend scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, container-security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production deployment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: []
            });

      - name: Backup production database
        run: |
          # Trigger database backup before deployment
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"backup": true}' \
            ${{ secrets.PRODUCTION_BACKUP_WEBHOOK_URL }}

      - name: Deploy to Railway (Production)
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}",
              "image": "${{ needs.build-images.outputs.backend-image }}"
            }' \
            https://api.railway.app/v1/deployments

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./project

      - name: Run database migrations
        run: |
          # Run migrations on production database
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"command": "npx prisma migrate deploy"}' \
            ${{ secrets.PRODUCTION_MIGRATION_WEBHOOK_URL }}

      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          sleep 120
          
          # Comprehensive health checks
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health/db || exit 1
          
          # Test critical API endpoints
          curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/api/effects || exit 1

      - name: Update deployment status
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: '${{ secrets.PRODUCTION_FRONTEND_URL }}',
              description: 'Production deployment ${{ job.status }}'
            });

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Production deployment ${{ job.status }}!
            Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}
            Backend: ${{ secrets.PRODUCTION_BACKEND_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run E2E tests against production
        run: |
          cd project
          npm ci
          PLAYWRIGHT_BASE_URL=${{ secrets.PRODUCTION_FRONTEND_URL }} npm run test:e2e:headed
        env:
          CI: true

      - name: Monitor performance metrics
        run: |
          # Check response times and error rates
          curl -s "${{ secrets.PRODUCTION_BACKEND_URL }}/metrics" | grep -E "(http_request_duration|http_requests_total)"

      - name: Check application logs
        run: |
          # Monitor for any critical errors in the first 10 minutes
          sleep 600
          curl -s "${{ secrets.PRODUCTION_BACKEND_URL }}/health" | jq '.status'