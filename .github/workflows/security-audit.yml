name: Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/Dockerfile'
      - '.github/workflows/security-audit.yml'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install backend dependencies
        run: |
          cd runninghub-backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd project
          npm ci

      - name: Run npm audit (Backend)
        continue-on-error: true
        run: |
          cd runninghub-backend
          npm audit --audit-level=moderate --json > backend-audit.json

      - name: Run npm audit (Frontend)
        continue-on-error: true
        run: |
          cd project
          npm audit --audit-level=moderate --json > frontend-audit.json

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: audit-results
          path: |
            runninghub-backend/backend-audit.json
            project/frontend-audit.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend image for scanning
        run: |
          docker build -t cosnap-backend:scan ./runninghub-backend

      - name: Build frontend image for scanning
        run: |
          docker build -t cosnap-frontend:scan ./project

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cosnap-backend:scan'
          format: 'sarif'
          output: 'trivy-backend.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cosnap-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend.sarif'

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, container-security, code-security, secrets-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download audit results
        uses: actions/download-artifact@v3
        with:
          name: audit-results
          path: audit-results/

      - name: Generate security report
        run: |
          cat > security-report.md << 'EOF'
          # Security Audit Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Summary
          
          This report contains the results of automated security scans performed on the Cosnap AI application.
          
          ### Dependency Audit
          
          - Backend dependencies: $(if [ -f audit-results/backend-audit.json ]; then jq '.metadata.totalDependencies' audit-results/backend-audit.json; else echo "N/A"; fi)
          - Frontend dependencies: $(if [ -f audit-results/frontend-audit.json ]; then jq '.metadata.totalDependencies' audit-results/frontend-audit.json; else echo "N/A"; fi)
          
          ### Container Security
          
          - Container images scanned for vulnerabilities
          - Results uploaded to GitHub Security tab
          
          ### Code Analysis
          
          - CodeQL analysis completed
          - Results available in Security tab
          
          ### Secrets Detection
          
          - Repository scanned for exposed secrets
          - Gitleaks analysis completed
          
          ## Recommendations
          
          1. Review all high and critical severity vulnerabilities
          2. Update dependencies with known vulnerabilities
          3. Address any secrets detected in the codebase
          4. Monitor security advisories for used packages
          
          EOF

      - name: Create Issue for Security Findings
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”’ Security Audit Findings - ' + new Date().toISOString().split('T')[0],
              body: `
                ## Security Audit Alert
                
                The automated security audit has detected potential security issues.
                
                **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                **Commit:** ${{ github.sha }}
                **Date:** ${new Date().toISOString()}
                
                ### Action Required
                
                Please review the security findings in the workflow logs and take appropriate action.
                
                1. Check the Security tab for detailed vulnerability reports
                2. Review dependency audit results
                3. Address any critical or high-severity issues
                4. Update this issue when remediation is complete
                
                ### Priority Level
                
                - ðŸ”´ Critical: Immediate attention required
                - ðŸŸ¡ High: Address within 24 hours
                - ðŸŸ¢ Medium/Low: Address in next sprint
              `,
              labels: ['security', 'urgent']
            });

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#security-alerts'
          text: |
            ðŸš¨ Security audit detected issues in Cosnap AI
            
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: ${{ github.sha }}
            
            Please review immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}